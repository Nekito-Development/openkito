package wtf.norma.nekito.exploit.argument;

import org.apache.commons.lang3.StringUtils;
import wtf.norma.nekito.exception.CommandException;
import wtf.norma.nekito.exploit.Exploit;

public class ArgumentParser {

    /*
    Some shitty usage creator, because im forgetting to update annotation usage xd
   */
    public static String createUsage(Exploit<?> exploit) {
        StringBuilder stringBuilder = new StringBuilder();

        stringBuilder
                .append(".exploit ")
                .append(exploit.getName())
                .append(" ");

        for (Argument argument : exploit.getArguments()) {
            stringBuilder
                    .append("<")
                    .append(argument.getName())
                    .append(">")
                    .append(" ");
        }
        return stringBuilder.toString();
    }

    /*
    Yeah i can make it better but who cares
   */
    public static Object[] parseArgs(Exploit<?> exploit, String[] args) throws CommandException {
        if (exploit.getArguments().length > args.length) {
            throw new CommandException("Usage: &d" + exploit.getUsage());
        }

        Object[] parsedArgs = new Object[exploit.getArguments().length];
        for (Argument argument : exploit.getArguments()) {
            try {
                String arg = args[argument.getIndex()];
                if (argument.getType() == String[].class) {
                    if (argument.getIndex() < (exploit.getArguments().length - 1)) {
                        throw new CommandException("Array argument should be last.");
                    }

                    parsedArgs[argument.getIndex()] = StringUtils
                            .join(args, " ", argument.getIndex(), args.length);
                    break;
                } else if (argument.getType() == Integer.class || argument.getType() == Character.class
                        || argument.getType() == Byte.class) {
                    parsedArgs[argument.getIndex()] = Integer.parseInt(arg);
                } else if (argument.getType() == Double.class) {
                    parsedArgs[argument.getIndex()] = Double.parseDouble(arg);
                } else if (argument.getType() == Float.class) {
                    parsedArgs[argument.getIndex()] = Float.parseFloat(arg);
                } else if (argument.getType() == Long.class) {
                    parsedArgs[argument.getIndex()] = Long.parseLong(arg);
                } else if (argument.getType() == String.class) {
                    parsedArgs[argument.getIndex()] = arg;
                } else {
                    parsedArgs[argument.getIndex()] = Boolean.getBoolean(arg);
                }
            } catch (Exception e) {
                e.printStackTrace();
                throw new CommandException(String
                        .format("Can't parse exploit argument. &8[&7Name: &d%s&7, Index: &d%s&7, Type: &d%s&8]",
                                argument.getName(), argument.getIndex(), argument.getType().getSimpleName()));
            }
        }
        return parsedArgs;
    }
}
